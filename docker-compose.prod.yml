services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: cloud-postgres
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-cloud}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - cloud-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres}']
      interval: 30s
      timeout: 10s
      retries: 3

  # API Service
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile.prod
      target: production
    container_name: cloud-api
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/cloud}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-here}
      - OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID:-cloud-client}
      - OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET:-cloud-secret}
      - PORT=4000
    ports:
      - '4000:4000'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cloud-network
    volumes:
      - uploads:/app/apps/api/uploads
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:4000/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Account App
  account:
    build:
      context: .
      dockerfile: apps/account/Dockerfile.prod
      target: production
    container_name: cloud-account
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://api:4000}
      - PORT=3000
    ports:
      - '3000:3000'
    depends_on:
      api:
        condition: service_healthy
    networks:
      - cloud-network
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:3000']
      interval: 30s
      timeout: 10s
      retries: 3

  # Files App
  files:
    build:
      context: .
      dockerfile: apps/files/Dockerfile.prod
      target: production
    container_name: cloud-files
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://api:4000}
      - PORT=3001
    ports:
      - '3001:3001'
    depends_on:
      api:
        condition: service_healthy
    networks:
      - cloud-network
    healthcheck:
      test: ['CMD', 'nc', '-z', 'localhost', '3001']
      interval: 30s
      timeout: 10s
      retries: 3

  # Notes App
  notes:
    build:
      context: .
      dockerfile: apps/notes/Dockerfile.prod
      target: production
    container_name: cloud-notes
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://api:4000}
      - PORT=3002
    ports:
      - '3002:3002'
    depends_on:
      api:
        condition: service_healthy
    networks:
      - cloud-network
    healthcheck:
      test: ['CMD', 'nc', '-z', 'localhost', '3002']
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: cloud-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      account:
        condition: service_healthy
      files:
        condition: service_healthy
      notes:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - cloud-network
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:80']
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  uploads:
    driver: local

networks:
  cloud-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
