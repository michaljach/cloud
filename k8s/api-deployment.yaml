apiVersion: v1
kind: Secret
metadata:
  name: api-secret
type: Opaque
data:
  # These are base64 encoded values - replace with your actual values
  jwt-secret: eW91ci1zdXBlci1zZWN1cmUtand0LXNlY3JldC1oZXJl # your-super-secure-jwt-secret-here
  oauth-client-secret: eW91ci1vYXV0aC1zZWNyZXQtaGVyZQ== # your-oauth-secret-here
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-config
data:
  NODE_ENV: 'production'
  OAUTH_CLIENT_ID: 'cloud-client'
  PORT: '4000'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  labels:
    app: api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
        - name: api
          image: cloud-api:latest
          imagePullPolicy: Never # For local builds, use Always for registry
          ports:
            - containerPort: 4000
          env:
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: api-config
                  key: NODE_ENV
            - name: DATABASE_URL
              value: 'postgresql://postgres:$(POSTGRES_PASSWORD)@postgres:5432/cloud'
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: postgres-password
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: api-secret
                  key: jwt-secret
            - name: OAUTH_CLIENT_ID
              valueFrom:
                configMapKeyRef:
                  name: api-config
                  key: OAUTH_CLIENT_ID
            - name: OAUTH_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: api-secret
                  key: oauth-client-secret
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: api-config
                  key: PORT
          volumeMounts:
            - name: uploads-storage
              mountPath: /app/apps/api/uploads
          livenessProbe:
            httpGet:
              path: /health
              port: 4000
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 4000
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            requests:
              memory: '256Mi'
              cpu: '250m'
            limits:
              memory: '512Mi'
              cpu: '500m'
      volumes:
        - name: uploads-storage
          persistentVolumeClaim:
            claimName: uploads-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: api
  labels:
    app: api
spec:
  ports:
    - port: 4000
      targetPort: 4000
  selector:
    app: api
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: uploads-pvc
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
