// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Seed configuration
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id           String         @id @default(uuid())
  name         String
  userWorkspaces UserWorkspace[]
  invites      WorkspaceInvite[]
}

model User {
  id           String  @id @default(uuid())
  username     String  @unique
  password     String
  fullName     String?
  storageLimit Int     @default(1024) // Storage limit in MB
  tokens       OAuthToken[]
  userWorkspaces UserWorkspace[]
  sentInvites  WorkspaceInvite[] @relation("InvitedBy")
  receivedInvites WorkspaceInvite[] @relation("InvitedUser")
}

model UserWorkspace {
  id          String    @id @default(uuid())
  userId      String
  workspaceId String
  role        String    @default("member") // 'owner', 'admin', 'member'
  joinedAt    DateTime  @default(now())
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@unique([userId, workspaceId])
}

model WorkspaceInvite {
  id          String    @id @default(uuid())
  workspaceId String
  invitedByUserId String
  invitedUserId String?
  invitedUsername String // For users who don't exist yet
  role        String    @default("member") // 'owner', 'admin', 'member'
  status      String    @default("pending") // 'pending', 'accepted', 'declined', 'expired'
  expiresAt   DateTime  @default(dbgenerated("NOW() + INTERVAL '7 days'"))
  createdAt   DateTime  @default(now())
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  invitedBy   User      @relation("InvitedBy", fields: [invitedByUserId], references: [id], onDelete: Cascade)
  invitedUser User?     @relation("InvitedUser", fields: [invitedUserId], references: [id], onDelete: SetNull)
  
  @@unique([workspaceId, invitedUsername])
}

model OAuthClient {
  id           Int          @id @default(autoincrement())
  clientId     String       @unique
  clientSecret String
  grants       String       // comma-separated list
  redirectUris String       // comma-separated list
  tokens       OAuthToken[]
}

model OAuthToken {
  id           Int          @id @default(autoincrement())
  accessToken  String       @unique
  accessTokenExpiresAt DateTime
  scope        String?
  client       OAuthClient  @relation(fields: [clientId], references: [clientId])
  clientId     String
  user         User         @relation(fields: [userId], references: [id])
  userId       String
}

model PlatformSettings {
  id                    String   @id @default("platform")
  title                 String   @default("Cloud Platform")
  timezone              String   @default("UTC")
  maintenanceMode       Boolean  @default(false)
  registrationEnabled   Boolean  @default(true)
  defaultStorageLimit   Int      @default(1024) // Storage limit in MB
  maxFileSize           Int      @default(100)  // Max file size in MB
  supportEmail          String?
  companyName           String?
  updatedAt             DateTime @updatedAt
  createdAt             DateTime @default(now())
}