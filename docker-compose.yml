version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: cloud-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-cloud}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - cloud-network

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: production
    container_name: cloud-api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/cloud}
      - JWT_SECRET=${JWT_SECRET}
      - PORT=4000
    ports:
      - '4000:4000'
    depends_on:
      - postgres
    networks:
      - cloud-network
    volumes:
      - uploads:/app/apps/api/uploads

  account:
    build:
      context: .
      dockerfile: apps/account/Dockerfile
      target: production
    container_name: cloud-account
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://api:4000}
      - PORT=3000
    ports:
      - '3000:3000'
    depends_on:
      - api
    networks:
      - cloud-network

  files:
    build:
      context: .
      dockerfile: apps/files/Dockerfile
      target: production
    container_name: cloud-files
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://api:4000}
      - PORT=3001
    ports:
      - '3001:3001'
    depends_on:
      - api
    networks:
      - cloud-network

  notes:
    build:
      context: .
      dockerfile: apps/notes/Dockerfile
      target: production
    container_name: cloud-notes
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://api:4000}
      - PORT=3002
    ports:
      - '3002:3002'
    depends_on:
      - api
    networks:
      - cloud-network

  nginx:
    image: nginx:alpine
    container_name: cloud-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - account
      - files
      - notes
      - api
    networks:
      - cloud-network

volumes:
  postgres_data:
  uploads:

networks:
  cloud-network:
    driver: bridge
